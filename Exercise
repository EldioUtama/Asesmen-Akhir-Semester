from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from skimage.feature import hog
from sklearn import svm
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import numpy as np
import matplotlib.pyplot as plt

# Load the MNIST dataset
digits = datasets.load_digits()

# Flatten the images
n_samples = len(digits.images)
data = digits.images.reshape((n_samples, -1))

# Create HOG features
hog_features = [hog(img.reshape(8, 8), pixels_per_cell=(4, 4), cells_per_block=(2, 2), block_norm='L2') for img in data]

# Create labels
labels = digits.target

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(hog_features, labels, test_size=0.2, random_state=42)

# Initialize the SVM classifier
clf = svm.SVC(kernel='linear')

# Train the classifier
clf.fit(X_train, y_train)

# Predict the labels on the test set
y_pred = clf.predict(X_test)

# Print the evaluation results
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Accuracy: ", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Plot some of the test images with their predicted labels
# Plot some of the test images with their predicted labels
_, axes = plt.subplots(nrows=1, ncols=4, figsize=(10, 3))
for ax, hog_feature, label in zip(axes, X_test, y_pred):
    ax.set_axis_off()
    original_image = digits.images[y_test.tolist().index(label)]  # Find the original image by matching the label
    ax.imshow(original_image, cmap=plt.cm.gray_r, interpolation='nearest')
    ax.set_title(f'Prediction: {label}')
plt.show()
